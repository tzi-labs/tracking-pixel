(function() {
  "use strict";
  const PIXEL_FUNC_NAME$2 = "strk";
  const VERSION$1 = "1";
  class Helper {
    static isPresent(variable) {
      return typeof variable !== "undefined" && variable !== null && variable !== "";
    }
    static now() {
      return Date.now();
    }
    static guid() {
      return `${VERSION$1}-${"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0;
        const v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      })}`;
    }
    // Safely converts optional data (object, function, or other) to a string for query params
    static optionalData(data) {
      if (!Helper.isPresent(data)) {
        return "";
      }
      try {
        if (typeof data === "object") {
          return JSON.stringify(data);
        } else if (typeof data === "function") {
          return Helper.optionalData(data());
        } else {
          return String(data);
        }
      } catch (e) {
        console.error("Error processing optional data:", e, data);
        return "";
      }
    }
    static isExternalHost(linkElement) {
      return linkElement.hostname !== window.location.hostname && (linkElement.protocol === "http:" || linkElement.protocol === "https:");
    }
  }
  class Cookie {
    static prefix() {
      return `__${PIXEL_FUNC_NAME$2}_`;
    }
    static set(name, value, minutes, path = "/", domain = null, sameSite = "Lax", secure = false) {
      let expires = "";
      if (Helper.isPresent(minutes)) {
        const date = /* @__PURE__ */ new Date();
        date.setTime(date.getTime() + minutes * 60 * 1e3);
        expires = `expires=${date.toUTCString()}; `;
      }
      let cookieString = `${this.prefix()}${name}=${encodeURIComponent(value)}; ${expires}path=${path}; SameSite=${sameSite}`;
      if (domain) {
        cookieString += `; domain=${domain}`;
      }
      if (secure) {
        cookieString += `; Secure`;
      }
      document.cookie = cookieString;
    }
    static get(name) {
      const prefixedName = `${this.prefix()}${name}=`;
      const ca = document.cookie.split(";");
      for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === " ") {
          c = c.substring(1);
        }
        if (c.indexOf(prefixedName) === 0) {
          try {
            return decodeURIComponent(c.substring(prefixedName.length, c.length));
          } catch (e) {
            console.error(`Error decoding cookie ${name}:`, e);
            return c.substring(prefixedName.length, c.length);
          }
        }
      }
      return null;
    }
    static delete(name, path = "/", domain = null) {
      this.set(name, "", -100, path, domain);
    }
    static exists(name) {
      return Helper.isPresent(this.get(name));
    }
    static setUtms() {
      const utmParams = [
        "utm_source",
        "utm_medium",
        "utm_term",
        "utm_content",
        "utm_campaign",
        "utm_source_platform",
        "utm_creative_format",
        "utm_marketing_tactic"
        // Add any other relevant parameters here (e.g., gclid, fbclid)
      ];
      let utmValues = {};
      let foundUtm = false;
      utmParams.forEach((param) => {
        const value = Url.getParameterByName(param);
        if (Helper.isPresent(value)) {
          utmValues[param] = value;
          foundUtm = true;
        }
      });
      if (foundUtm) {
        try {
          const jsonValue = JSON.stringify(utmValues);
          this.set("utm", jsonValue, null);
          console.log("UTM parameters saved to session cookie:", utmValues);
        } catch (e) {
          console.error("Error saving UTM parameters to cookie:", e);
        }
      }
    }
    static getUtm(name) {
      if (this.exists("utm")) {
        try {
          const utms = JSON.parse(this.get("utm"));
          return utms && Helper.isPresent(utms[name]) ? utms[name] : "";
        } catch (e) {
          console.error("Error parsing UTM cookie:", e);
          return "";
        }
      }
      return "";
    }
  }
  class Browser {
    static nameAndVersion() {
      const ua = navigator.userAgent;
      let tem;
      let M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
      if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return `IE ${tem[1] || ""}`;
      }
      if (M[1] === "Chrome") {
        tem = ua.match(/\b(OPR|Edg)\/(\d+)/);
        if (tem != null) return tem.slice(1).join(" ").replace("OPR", "Opera").replace("Edg", "Edge");
      }
      M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, "-?"];
      tem = ua.match(/version\/(\d+)/i);
      if (tem != null) M.splice(1, 1, tem[1]);
      return M.join(" ");
    }
    static isMobile() {
      let check = false;
      (function(a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
          check = true;
      })(navigator.userAgent || navigator.vendor || window.opera);
      return check || "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
    }
    static userAgent() {
      return window.navigator.userAgent;
    }
  }
  class Url {
    static getParameterByName(name, url = window.location.href) {
      name = name.replace(/[\[\]]/g, "\\$&");
      const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`, "i");
      const results = regex.exec(url);
      if (!results) return null;
      if (!results[2]) return "";
      try {
        return decodeURIComponent(results[2].replace(/\+/g, " "));
      } catch (e) {
        console.error(`Error decoding URL parameter ${name}:`, e);
        return results[2].replace(/\+/g, " ");
      }
    }
  }
  const PIXEL_FUNC_NAME$1 = "strk";
  const PIXEL_ENDPOINT = "https://your-tracker-server.com/";
  const VERSION = "1";
  const Config = {
    id: "",
    // The website/app Tracker ID, set via init()
    version: VERSION,
    params: {},
    // Custom parameters to add to every request
    pageLoadOnce: false,
    // Ensure 'pageload' fires only once
    pageCloseOnce: false,
    // Ensure 'pageclose' fires only once
    lastExternalHost: null
    // Store last clicked external link info
  };
  function initQueue() {
    console.log("[core.js] initQueue() called.");
    const uidCookieName = "uid";
    const uidExists = Cookie.exists(uidCookieName);
    const currentUid = uidExists ? Cookie.get(uidCookieName) : Helper.guid();
    Cookie.set(uidCookieName, currentUid, 2 * 365 * 24 * 60);
    Cookie.setUtms();
    console.log("Initial setup (UID cookie, UTMs) complete.");
  }
  function processCommand(method, value, optional) {
    console.log("[core.js] processCommand() received: method=", method, " value=", value, " optional=", optional);
    if (method === "init") {
      if (value) {
        Config.id = value;
        console.log(`[core.js] Tracker initialized with ID: ${Config.id}`);
      } else {
        console.error("[core.js] Initialization command 'init' requires a tracker ID.");
      }
    } else if (method === "param") {
      if (value && typeof optional !== "undefined") {
        Config.params[value] = () => Helper.optionalData(optional);
        console.log(`[core.js] Custom parameter set: ${value}`);
      } else {
        console.error("[core.js] Command 'param' requires a key and a value.");
      }
    } else if (method === "event") {
      handleEvent(value, optional);
    } else {
      console.warn(`[core.js] Unknown command received: ${method}`);
    }
  }
  function handleEvent(eventName, eventData) {
    console.log(`[core.js] handleEvent() called: eventName=${eventName}, eventData=`, eventData);
    if (!eventName) {
      console.error("Event command requires an event name.");
      return;
    }
    const timestamp = eventName === "pageload" && window[PIXEL_FUNC_NAME$1] && window[PIXEL_FUNC_NAME$1].t ? window[PIXEL_FUNC_NAME$1].t : Helper.now();
    if (eventName === "pageload") {
      if (!Config.pageLoadOnce) {
        Config.pageLoadOnce = true;
        sendPayload(eventName, timestamp, eventData);
      } else {
        console.log("'pageload' event already sent for this page view.");
      }
    } else if (eventName === "pageclose") {
      let closeData = eventData;
      if (Config.lastExternalHost && Helper.now() - Config.lastExternalHost.time < 5e3) {
        const externalLinkData = { external_link: Config.lastExternalHost.link };
        if (typeof closeData !== "object" || closeData === null) {
          closeData = {};
        }
        closeData = { ...closeData, ...externalLinkData };
      }
      sendPayload(eventName, timestamp, closeData);
    } else {
      sendPayload(eventName, timestamp, eventData);
    }
  }
  function sendPayload(event, timestamp, optionalData) {
    console.log(`[core.js] sendPayload() called: event=${event}, timestamp=${timestamp}, optionalData=`, optionalData);
    if (!Config.id) {
      console.warn("[core.js] Tracker not initialized with an ID. Payload not sent.");
      return;
    }
    const dataObject = {};
    let processedEventData;
    try {
      if (typeof optionalData === "string" && (optionalData.startsWith("{") || optionalData.startsWith("["))) {
        processedEventData = JSON.parse(optionalData);
      } else {
        processedEventData = optionalData;
      }
    } catch (e) {
      console.warn("Could not parse event data as JSON, sending as string:", optionalData);
      processedEventData = optionalData;
    }
    const baseAttributes = {
      id: () => Config.id,
      // Website/Tracker ID
      uid: () => Cookie.get("uid"),
      // User ID from cookie
      ev: () => event,
      // Event name
      ed: () => processedEventData,
      // Event data (potentially parsed object or original value)
      v: () => Config.version,
      // Tracker version
      dl: () => window.location.href,
      // Document location (URL)
      rl: () => document.referrer,
      // Referrer URL
      ts: () => timestamp,
      // Timestamp (provided)
      de: () => document.characterSet || document.charset,
      // Document encoding
      sr: () => `${window.screen.width}x${window.screen.height}`,
      // Screen resolution
      vp: () => `${window.innerWidth}x${window.innerHeight}`,
      // Viewport size
      cd: () => window.screen.colorDepth,
      // Color depth
      dt: () => document.title,
      // Document title
      bn: () => Browser.nameAndVersion(),
      // Browser name and version
      md: () => Browser.isMobile(),
      // Mobile device? (boolean)
      ua: () => Browser.userAgent(),
      // Full user agent string
      tz: () => (/* @__PURE__ */ new Date()).getTimezoneOffset(),
      // Timezone offset (minutes)
      utm_source: (key) => Cookie.getUtm(key),
      // Get utm_source from cookie
      utm_medium: (key) => Cookie.getUtm(key),
      // Get utm_medium
      utm_term: (key) => Cookie.getUtm(key),
      // Get utm_term
      utm_content: (key) => Cookie.getUtm(key),
      // Get utm_content
      utm_campaign: (key) => Cookie.getUtm(key),
      // Get utm_campaign
      utm_source_platform: (key) => Cookie.getUtm(key),
      utm_creative_format: (key) => Cookie.getUtm(key),
      utm_marketing_tactic: (key) => Cookie.getUtm(key)
    };
    const allAttributes = { ...baseAttributes, ...Config.params };
    for (const key in allAttributes) {
      if (Object.hasOwnProperty.call(allAttributes, key)) {
        try {
          const value = allAttributes[key](key);
          dataObject[key] = Helper.isPresent(value) ? value : null;
        } catch (e) {
          console.error(`Error getting value for parameter "${key}":`, e);
          dataObject[key] = null;
        }
      }
    }
    let jsonData;
    try {
      jsonData = JSON.stringify(dataObject);
    } catch (e) {
      console.error(`Failed to stringify tracking data object for event ${event}:`, e, dataObject);
      return;
    }
    console.log(`[core.js] Sending POST payload for event: ${event}`, dataObject);
    if (navigator.sendBeacon) {
      try {
        const blob = new Blob([jsonData], { type: "application/json" });
        const sent = navigator.sendBeacon(PIXEL_ENDPOINT, blob);
        if (!sent) {
          console.warn(`navigator.sendBeacon returned false for ${event}. Falling back to fetch.`);
          sendFetchPost(jsonData);
        }
      } catch (e) {
        console.error(`Error using navigator.sendBeacon for ${event}:`, e);
        sendFetchPost(jsonData);
      }
    } else {
      sendFetchPost(jsonData);
    }
  }
  async function sendFetchPost(jsonData) {
    console.log(`[core.js] sendFetchPost() called for endpoint: ${PIXEL_ENDPOINT}`);
    try {
      const response = await fetch(PIXEL_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: jsonData,
        keepalive: true,
        // Attempt to keep connection alive for unload events
        mode: "cors"
        // Explicitly set mode for cross-origin requests
      });
      if (!response.ok) {
        console.warn(`Fetch POST request failed for ${PIXEL_ENDPOINT} with status: ${response.status}`);
      }
      console.log(`Sent payload via fetch POST to ${PIXEL_ENDPOINT}`);
    } catch (error) {
      console.error(`Error sending payload via fetch POST to ${PIXEL_ENDPOINT}:`, error);
    }
  }
  const PIXEL_FUNC_NAME = "strk";
  console.log(`[index.js] TOP LEVEL: Script loaded. PIXEL_FUNC_NAME = ${PIXEL_FUNC_NAME}`);
  console.log(`[index.js] Checking window[${PIXEL_FUNC_NAME}]...`, window[PIXEL_FUNC_NAME]);
  if (typeof window[PIXEL_FUNC_NAME] !== "undefined" && typeof window[PIXEL_FUNC_NAME].queue !== "undefined") {
    console.log(`[index.js] Snippet function found. Processing queue.`);
    const existingQueue = window[PIXEL_FUNC_NAME].queue;
    const initialTimestamp = window[PIXEL_FUNC_NAME].t || Helper.now();
    window[PIXEL_FUNC_NAME] = function() {
      console.log(`[index.js] Global function ${PIXEL_FUNC_NAME} called with args:`, arguments);
      processCommand.apply(null, arguments);
    };
    window[PIXEL_FUNC_NAME].t = initialTimestamp;
    window[PIXEL_FUNC_NAME].process = function() {
      console.log(`[index.js] .process method called directly with:`, arguments);
      processCommand.apply(null, arguments);
    };
    console.log("[index.js] Calling initQueue()...");
    initQueue();
    console.log(`[index.js] Processing ${existingQueue.length} queued commands...`);
    existingQueue.forEach((args, index) => {
      console.log(`[index.js] Processing queued command ${index}:`, args);
      window[PIXEL_FUNC_NAME].process.apply(null, args);
    });
  } else {
    console.warn(`[index.js] ${PIXEL_FUNC_NAME} global function or queue not initialized by snippet. Setting up directly.`);
    window[PIXEL_FUNC_NAME] = function() {
      console.log(`[index.js] Fallback global function ${PIXEL_FUNC_NAME} called with args:`, arguments);
      processCommand.apply(null, arguments);
    };
    window[PIXEL_FUNC_NAME].t = Helper.now();
    window[PIXEL_FUNC_NAME].process = function() {
      console.log(`[index.js] Fallback .process method called directly with:`, arguments);
      processCommand.apply(null, arguments);
    };
    console.log("[index.js] Calling initQueue() in fallback...");
    initQueue();
  }
  console.log("[index.js] Setting up event listeners...");
  const isSafari = typeof safari === "object" && safari.pushNotification;
  const isPageHideSupported = "onpageshow" in self;
  const pageCloseEvent = isPageHideSupported && !isSafari ? "pagehide" : "unload";
  window.addEventListener(pageCloseEvent, function() {
    console.log(`[index.js] ${pageCloseEvent} event triggered.`);
    if (!Config.pageCloseOnce) {
      Config.pageCloseOnce = true;
      console.log(`[index.js] Sending 'pageclose' event via ${PIXEL_FUNC_NAME}...`);
      window[PIXEL_FUNC_NAME]("event", "pageclose");
    } else {
      console.log(`[index.js] 'pageclose' event already processed.`);
    }
  });
  function setupEventListeners() {
    console.log("[index.js] setupEventListeners() called.");
    document.body.addEventListener("click", function(e) {
      console.log("[index.js] Body click listener fired.");
      let target = e.target;
      let dataAttrFound = false;
      let linkFound = false;
      while (target && target !== document.body) {
        if (!dataAttrFound) {
          const eventName = target.getAttribute(`data-${PIXEL_FUNC_NAME}-event`);
          if (eventName) {
            dataAttrFound = true;
            const eventData = target.getAttribute(`data-${PIXEL_FUNC_NAME}-data`);
            console.log(`[index.js] Data attribute click detected: event='${eventName}', data='${eventData}'`);
            window[PIXEL_FUNC_NAME]("event", eventName, eventData);
          }
        }
        if (!linkFound && target.tagName === "A" && target.href) {
          linkFound = true;
          if (Helper.isExternalHost(target)) {
            console.log(`[index.js] External link clicked: ${target.href}`);
            Config.lastExternalHost = { link: target.href, time: Helper.now() };
          }
        }
        if (dataAttrFound && linkFound) {
          break;
        }
        target = target.parentElement;
      }
    }, true);
    console.log("[index.js] Click event listeners attached to body.");
  }
  console.log(`[index.js] Document readyState: ${document.readyState}. Attaching DOM listeners...`);
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupEventListeners);
  } else {
    setupEventListeners();
  }
  console.log(`[index.js] ${PIXEL_FUNC_NAME} tracker core setup potentially complete.`);
})();
